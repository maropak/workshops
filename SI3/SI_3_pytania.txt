

1.	What is the reason for implementing our own json dsl for filtering? Would it not be more maintainable to write the filters as pure java functions? 
- THERE IS JAVA CODE INSIDE, IN JSON WE ONLY PROVIDE CONDITIONS AND WHAT WE WANT TAKE 
- WE SEPARATE CONFIGURATION FROM CODE
This would make them easily unit testable and also mean that anyone can write whatever filter they want rather than having to update the dsl. 
- JSON CONFIG IS ALSO EASY UNIT TESTABLE (i WILL SHOW YOU TEST), AND EVERYONE CAN WRITE OWN JSON (WE WILL RPOVIDE SIMPLE DSL TO COVER ALL OPTIONS)
E.g. what if I want to filter on a range of ages or employees whose name begins with a certain string. Could you elaborate on the perceived benefits of introducing this?
- need to provide <> ans startWith
-- wlasna implementacja
-- SpEL tam wcisnac jakos


2.	It also seems that a where element is needed for each item you want to check your filter against. 
In the scenario where I wanted to check if a value is in a list of values or perhaps is an instance of an enum type. Could you go through how that could be achieved using this dsl? 
- NO WHERE NEEDED
- instance of an enum type ????

3.	You mentioned that the json format is easier for non-developers to understand. 
Who would be working with our code that isn’t a developer? Also by making them use this json dsl developers no longer have any help from the compiler or IDE. 
I would have thought that we would therefore see more issues at runtime rather than compile time with this approach.
- WE HAVE COMPILE TIME CHECK OF JSON STRUCTURE, IT JUST DEFINE WHAT AND WHEN IS TAKEN, NO DIFICOULT LOGIC, SO NO ISSUES ARE EXPECTED

- If it is possible to plug in java filters as well then that’s fantastic.
